{"version":3,"sources":["Components/Context/Context.js","Services/APIs.js","Assets/0a-export.js","Assets/logo.png","Assets/full-logo.svg","Assets/delete.gif","Assets/loading.gif","App.js","serviceWorker.js","index.js"],"names":["MainContext","createContext","ContextProvider","state","usersList","usersObject","updateState","data","setState","initialRender","a","getAllUsers","res","temp","map","obj","key","nextId","tempObj","forEach","element","id","console","error","alert","this","Provider","value","props","children","Component","baseUrl","config","method","url","axios","getUserPosts","AddNewPost","userId","JSON","stringify","editThePost","getPostDetails","getCommentsForPost","addComment","postId","deleteUsers","deletePosts","Images","mainLogo","require","default","fullLogo","delete","loading","AllUsersPage","React","lazy","UserPage","PostPage","App","useContext","className","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","Context","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a18cd1b5.chunk.js","sourcesContent":["import React, { Component, createContext } from \"react\";\r\nimport { getAllUsers } from \"./../../Services/APIs\";\r\nimport nextId from \"react-id-generator\";\r\n\r\nexport const MainContext = createContext();\r\n\r\nexport default class ContextProvider extends Component {\r\n  state = {\r\n    usersList: [],\r\n    usersObject: null,\r\n  };\r\n  updateState = (data) => {\r\n    this.setState({ ...data });\r\n  };\r\n\r\n  initialRender = async () => {\r\n    try {\r\n      let res = await getAllUsers();\r\n      let temp = res.data.map((obj) => {\r\n        return { ...obj, key: nextId() };\r\n      });\r\n      let tempObj = {};\r\n      res.data.forEach((element) => {\r\n        tempObj = {\r\n          ...tempObj,\r\n          [element.id]: element,\r\n        };\r\n      });\r\n      this.setState({ usersList: [...temp], usersObject: { ...tempObj } });\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(error);\r\n      //   setLoading(false)\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initialRender();\r\n  }\r\n  render() {\r\n    return (\r\n      <MainContext.Provider\r\n        value={{ ...this.state, updateState: this.updateState }}\r\n      >\r\n        {this.props.children}\r\n      </MainContext.Provider>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nlet baseUrl = \"https://jsonplaceholder.typicode.com/\";\r\n\r\nexport const getAllUsers = () => {\r\n  let config = {\r\n    method: \"get\",\r\n    url: `${baseUrl}users`,\r\n  };\r\n  return axios(config);\r\n};\r\nexport const getUserDetails = (id) => {\r\n  let config = {\r\n    method: \"get\",\r\n    url: `${baseUrl}users/${id}`,\r\n  };\r\n  return axios(config);\r\n};\r\nexport const getUserPosts = (id) => {\r\n  let config = {\r\n    method: \"get\",\r\n    url: `${baseUrl}users/${id}/posts`,\r\n  };\r\n  return axios(config);\r\n};\r\nexport const AddNewPost = (data) => {\r\n  let config = {\r\n    method: \"post\",\r\n    url: `${baseUrl}users/${data.userId}/posts`,\r\n    data: JSON.stringify(data),\r\n  };\r\n  return axios(config);\r\n};\r\nexport const editThePost = (data) => {\r\n  let config = {\r\n    method: \"PUT\",\r\n    url: `${baseUrl}posts/${data.id}`,\r\n    data: JSON.stringify(data),\r\n  };\r\n  return axios(config);\r\n};\r\nexport const getPostDetails = (id) => {\r\n  let config = {\r\n    method: \"get\",\r\n    url: `${baseUrl}posts/${id}`,\r\n  };\r\n  return axios(config);\r\n};\r\nexport const getCommentsForPost = (id) => {\r\n  let config = {\r\n    method: \"get\",\r\n    url: `${baseUrl}posts/${id}/comments`,\r\n  };\r\n  return axios(config);\r\n};\r\nexport const addComment = (data) => {\r\n  let config = {\r\n    method: \"post\",\r\n    url: `${baseUrl}posts/${data.postId}/comments`,\r\n    data: JSON.stringify(data),\r\n  };\r\n  return axios(config);\r\n};\r\nexport const deleteUsers = (id) =>{\r\n  let config = {\r\n    method: \"delete\",\r\n    url: `${baseUrl}users/${id}`\r\n  };\r\n  return axios(config);\r\n\r\n}\r\nexport const deletePosts = (id) =>{\r\n  let config = {\r\n    method: \"delete\",\r\n    url: `${baseUrl}posts/${id}`\r\n  };\r\n  return axios(config);\r\n\r\n}","export const Images = {\r\n  mainLogo: require(\"./logo.png\").default,\r\n  fullLogo: require(\"./full-logo.svg\").default,\r\n  delete: require('./delete.gif').default,\r\n  loading: require('./loading.gif').default\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.f69b9c58.png\";","export default __webpack_public_path__ + \"static/media/full-logo.534324cf.svg\";","export default __webpack_public_path__ + \"static/media/delete.a2921415.gif\";","export default __webpack_public_path__ + \"static/media/loading.de025f95.gif\";","import React, { Suspense } from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport \"./App.scss\";\r\nimport { Images } from \"./Assets/0a-export\";\r\n// import AllUsersPage from \"./Components/AllUsersPage/AllUsersPage\";\r\n// import UserPage from \"./Components/UserPage/UserPage\";\r\n// import PostPage from \"./Components/PostPage/PostPage\";\r\nimport { MainContext } from \"./Components/Context/Context\";\r\n\r\nconst AllUsersPage = React.lazy(() =>\r\n  import(\"./Components/AllUsersPage/AllUsersPage\")\r\n);\r\nconst UserPage = React.lazy(() => import(\"./Components/UserPage/UserPage\"));\r\nconst PostPage = React.lazy(() => import(\"./Components/PostPage/PostPage\"));\r\n\r\nconst App = () => {\r\n  const context = React.useContext(MainContext);\r\n  const { usersObject } = context;\r\n  return !usersObject ? (\r\n    \"\"\r\n  ) : (\r\n    <div className=\"main-app\">\r\n      <Suspense fallback={<div>Loading.....</div>}>\r\n        <Switch>\r\n          <Route path=\"/user/:id/post/:postId\" component={PostPage} />\r\n          <Route path=\"/user/:id\" component={UserPage} />\r\n          <Route path=\"/\" component={AllUsersPage} />\r\n        </Switch>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ContextProvider from \"./Components/Context/Context\";\r\n\r\nReactDOM.render(\r\n  \r\n    <BrowserRouter basename=\"/\">\r\n      <ContextProvider>\r\n      <App />\r\n      </ContextProvider>\r\n    </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}